


2. javascript基本语法
	2.1 在HTML中使用javascript
			① 在页面中用<script type="text/javascript"> code... </script> 任何位置
			② 在页面中用<script type="text/javascript" src='test.js'></script>标签内不要写内容
			③ 在标签中用事件驱动:
			    <div onclick="alert(‘hello,js’)"></div>
                <a href="javascript:alert(‘hello,js’);"></a>
	2.2 基本语法
		2.2.1 区分大小写
			PHP
				区分大小写：	常量	变量
				不区分大小写：	函数	类名
			js：
				严格区分大小写
		2.2.2 标示符
			不以数字开头的，数字 字母 下划线 $
	2.3 注释
		//单行注释
		/*  */ 多行注释
	2.4 语句（指令结束符）
		; 或换行 都可以
		推荐用;结束

	2.5 关键字和保留字
		break		else		new		var
		case		finally		return		void
		catch		for		switch	 while
		······
		abstract	enum		int		short
		······

	2.4 变量
		var 变量名 = 值;
		var 名1 = 值1,名2 = 值2 ....;

	2.5 数据类型
		常见类型：number(数字类型) string（字符串）  boolean(布尔)
		复合类型：object(对象)	array(数组)
		特殊类型：null	undefined	function

		2.5.1 数据类型	typeof()	返回值或者变量的数据类型
		2.5.2 字符串类型
			定义字符串	""  ''
				都不能解析变量
				解释转义字符
		2.5.2 数值类型
			① 整数类型   十进制   十六进制   八进制
			② 浮点型      科学计数法   浮点数的精度问题
			③ 数值范围 5e324 ~ 1.7976931348623157e+308  超过范围回自动转换成 infinity(正无穷) -infinity(负无穷)
			   可以使用 *isFinity() 验证是不是无穷  超出范围不能参与运算
			④ NaN类型  Not a Number
				 ① NaN与任何数字操作，结果都是NaN
				 ② NaN与任何数都不相等，包括自己
				 ③ 函数 isNaN() 判断是否是NaN
			⑤ Number类型转换
				特点： 1. 如果是布尔值，true和false分别转换为1和0
					   2. 数字，本色演出
					   3. null  -> 0
					   4. undifined  -> NaN
					   5. 字符串：
							a. “11”会变成11，“011”会变成11
							b. “1.1”会变成1.1
							c. “0xf”会变成相同大小的十进制整数值
							d. 如果字符串是空的，则将其转换为0
							e. 如果字符串包含除上述格式之外的字符，则将其转换成NaN
							f. '12e2' => 1200
			⑥ ParseInt类型转换
				特点：
					1. 数字开头的字符串，忽略后面的字母
					2. 0x开头回转换成十六进制， 0不可以
					3. 科学计数法无法行,忽略后面的字母
					4. 空字符串 NaN
					5. null true false NaN

			⑦ parseFloat类型转换
				特点：1. 第一个小数点有效，第二个无效
					  2. 数字开头的字符串，忽略后面的字母
					  3. 科学计数法有效
					  4. 16进制转换为0
				      5. 八进制 ，忽略前面的0， 无法换算八进制
		2.5.3 其他数据类型
		2.5.3 隐式数据类型转换
			①数字类型： 在字符串环境下 隐身转换为字符串 在布尔环境下
			②字符串类型：在数字环境下，可以隐式转换为字符串中的数字或NaN；在布尔环境下，可以隐式转换为true。
			③空字符串：在数字环境下可以隐式转换为0；在布尔环境下可以隐式转换为false;
			④字符串”true“：在数字环境下可以隐式转换位1；布尔为true
			⑤字符串“false”：数字环境为0，布尔为false
			⑥null：在字符串环境下，转换为“null”；数字环境下，转换为0，布尔环境下，转为false
			⑦NaN：在字符串环境下可以隐式转换为“NaN”;布尔环境下，转换为false
			⑧undefined：字符串环境下，转换为“undefined”，数字环境下，转为NaN，布尔下，转为false
			⑨true：字符串转为“true”，数字环境下转为1
			⑩false：字符串转为“false”，数字环境下转为0
		2.5.3 显式数据类型转换
		    数据类型转换成数字型、布尔型、字符串型: Number()、Boolean()、String()
            1.数字类型转换成字符串型，可以将其与一个空字符串相连:  var s = 123+””;
            2.字符串型转换成数字型，可以将其减0: var s = “123”- 0;
            3.字符串型或数字型转换成布尔型，可以使用两次！运算符: var s = “true”;	if(!!s){}

	2.6 运算符
		2.6.1 算术运算符：
			1.加法运算符		+
			2.减法运算符		-
			3.乘法运算符		*
			4.除法运算符		/
			5.模运算符		    %
			6.负号运算符		-
			7.正号运算符		+
			8.递增运算符		++
			9.递减运算符		--
		2.6.2  关系运算符
			1.相等运算符		==
			2.等同运算符		===
			3.不等运算符		!=
			4.不等同运算符		!==
			5.小于运算符		<
			6.大于运算符		>
			7.小于或等于运算符	<=
			8.大于或等于运算符	>=
			9.in运算符          in     //判断一个值是否属于某个数组或者一个属性是否属于一个对象
			10.instanceof       instanceof  //判断一个对象的实例是否属于某个对象
			11.字符串运算符		+连字符
			12.赋值运算符		=
		2.6.3 逻辑运算符：
			1.逻辑与		    &&
			2.逻辑或		    ||
			3.逻辑非		    !
		2.6.4 其他运算符：
			1.条件运算符		?:
			2.new运算符		    new 对象类型
			3.void运算符        void   //void运算符可以让操作数进行运算，但是却舍弃运算之后的结果。
			4.typeof运算符      typeof(a)  //说明操作数是什么类型。
		2.6.5.对象属性存取运算符
			我们使用.来调用和设置对象的属性或者方法 d.name  .
		2.6.6.delete运算符
			delete 运算符可以用来删除变量、对象的属性、或数组中的元素。delete运算符返回的是布尔值类型。
			delete 对象名		delete 变量名
			delete 对象名.属性
			delete 数组[索引]
		2.6.7.逗号运算符
			var a = 1;
			var b = 2;
			c = a+b,d = a-b;
		2.6.8.this运算符
			this代表的是当前对象。与php的$this的道理一样。

	2.7 语句
		a.while语句
		b.do…while语句
		c.for语句
		d.for…in语句
		    for(var i in window){ code... } //遍历对象中的所有属性或数组中的所有元素
		e.break语句
		f.continue语句
		g.with语句
		    document.write(‘test1’);
            with(document){ write(‘test1’); } // 简化对象属性调用的层次
